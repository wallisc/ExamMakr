/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package qsolutions.exam;

import java.io.StringWriter;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.*;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import junit.framework.TestCase;
import org.openide.util.Exceptions;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import property.Marks;
import qsolutions.api.FormatApi;

/**
 *
 * @author ryan
 */
public class FreeResponseTest extends TestCase
{
    public FreeResponseTest(String testName)
    {
        super(testName);
    }
    
    @Override
    protected void setUp() throws Exception
    {
        super.setUp();
    }
    
    @Override
    protected void tearDown() throws Exception
    {
        super.tearDown();
    }

    /**
     * Test of clone method, of class FreeResponse.
     */
    public void testClone()
    {
        System.out.println("clone");
                
        /*Long answer test variables*/
        int lines = 5;
        
        /*Question test variables*/
        String answer = "ans";
        String category = "cat";
        String level = "Medium";
        int marks = 3;
        
        /*DocumentItem test variables*/
        String text = "text";
        String type = "type";
        String abbreviation = "abbr";
        boolean active = true;
        
        FreeResponse instance = new FreeResponse();
         
        /*Long answer data*/
        instance.setExtraLines(lines);
        
        /*Question data*/
        instance.setAnswer(answer);
        instance.setMarks(marks);
        instance.setCategory(category);
        instance.setLevel(level);
        
        /*Document Item data*/
        instance.setActive(active);
        instance.setText(text);
        instance.setType(type);
        instance.setAbbreviation(abbreviation);
        
        FreeResponse result = (FreeResponse) instance.clone();
        
        /*Long Answer comparison*/
        assertEquals(lines, result.getExtraLines());
        
        /*Question comparison*/
        assertEquals(answer, result.getAnswer());
        assertEquals(marks, result.getMarks());
        assertEquals(category, result.getCategory());
        assertEquals(level, result.getLevel());
        
        /*DocumentItem comparison*/
        assertEquals(active, result.isActive());
        assertEquals(text, result.getText());
        assertEquals(type, result.getType());
        assertEquals(abbreviation, result.getAbbreviation());
        assertNotSame(instance, result);
    }

    /**
     * Test of equals method, of class FreeResponse.
     */
    public void testEquals()
    {
        System.out.println("equals");
        FreeResponse o = null;
        FreeResponse instance = new FreeResponse();
        boolean expResult = false;
        boolean result = instance.equals(o);
        assertEquals("Equal returned true when comparing a LongAnswer to "
                + "null", expResult, result);
        o = new FreeResponse();
        assertEquals("Two default(generated by constructor) "
                + "LongAnswers did not return equals", expResult, result);
        o.setMarks(3);
        assertTrue("A difference in marks did not cause inequality",
                !o.equals(instance));
        o.setMarks(1);
        o.setExtraLines(15);
        instance.setExtraLines(3);
        assertTrue("A difference in the extraLines field did not make two "
                + "LongAnswers inequal", !o.equals(instance));
        instance.setExtraLines(15);
        assertEquals("Two identical LongAnswers were not equal", o, instance);
    }

    /**
     * Test of getExtraLines method, of class FreeResponse.
     */
    /*public void testGetExtraLines()
    {
        System.out.println("getExtraLines");
        FreeResponse instance = new FreeResponse();
        int expResult = 0;
        int result = instance.getExtraLines();
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }*/

    /**
     * Test of setExtraLines method, of class FreeResponse.
     */
    /*
    public void testSetExtraLines()
    {
        System.out.println("setExtraLines");
        int lines = 0;
        FreeResponse instance = new FreeResponse();
        instance.setExtraLines(lines);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }*/

    /**
     * Test of getHTML method, of class FreeResponse.
     */
    
    public void testGetHTML()
    {
        System.out.println("getHTML");
        Exam exam = new Exam();
        FormatApi format = exam.getFormat();
        FreeResponse instance = new FreeResponse();
        instance.setText("<html>   <header> \n\n </header> <emptystringaaaa"
                + "eeeee> <\">       <b>textToExtract</b>     </p> </header>"
                + "</html>");
        String result = instance.getHTML(format, false);
        assertTrue(result != "");
        format.setProperty(Format.Property.MarksPosition, 
                Marks.MarksEnum.Left);
        format.setProperty(Format.Property.ShowAnswerLines, true);
        instance.setAnswer("The answer");
        assertTrue(instance.getHTML(format, false) != null);
        result = instance.getHTML(format, true);
        assertTrue(result != "");
        instance.setActive(false);
        result = instance.getHTML(format, true);
        assertEquals("", result);
        
    }
    
    public void testNewItem()
    {
        assertTrue(new FreeResponse().newItem() instanceof FreeResponse);
    }

    public void testMoodle()
    {
        final String kQuestion = "This question is multiple choice";
        
        Document document = newDocument();
        Element quizRoot = document.createElement("quiz");

        FreeResponse freer = new FreeResponse();
        freer.setText(kQuestion);

        quizRoot.appendChild(freer.serializeMoodle(document));
        document.appendChild(quizRoot);

        String out = xmlToString(document);
        // Stores the question
        assertTrue("Question text does not exist in question.",out.contains(kQuestion));
        // Is the right type
        assertTrue("Incorrect question type",out.contains("type=\"essay\""));
        System.out.println(xmlToString(document));
    }

    public static Document newDocument() {
        DocumentBuilderFactory docBuilder = DocumentBuilderFactory.newInstance();
        DocumentBuilder db = null;
        try{
            db = docBuilder.newDocumentBuilder();
        }catch(Exception e){
            Exceptions.printStackTrace(e);
        }
        return db.newDocument();
    }

    public static String xmlToString(Node node) {
        try {
            Source source = new DOMSource(node);
            StringWriter stringWriter = new StringWriter();
            Result result = new StreamResult(stringWriter);
            TransformerFactory factory = TransformerFactory.newInstance();
            Transformer transformer = factory.newTransformer();
            transformer.transform(source, result);
            return stringWriter.getBuffer().toString();
        } catch (TransformerConfigurationException e) {
            e.printStackTrace();
        } catch (TransformerException e) {
            e.printStackTrace();
        }
        return null;
    }
}