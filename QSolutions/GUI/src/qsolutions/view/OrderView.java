package qsolutions.view;

import java.awt.GridLayout;
import java.io.File;
import org.openide.util.Lookup;
import qsolutions.api.DocumentItemApi;
import qsolutions.api.OrderApi;

/**
 * View for multiple choice questions in an exam.
 */
public class OrderView extends QuestionView
{
    /**
     * Creates new form OrderView
     */
    public OrderView()
    {
        super();
        item = Lookup.getDefault().lookup(OrderApi.class).newItem();
        setEditView(false);
        initComponents();
        answerPanel.setLayout(new GridLayout(0, 1));
        answerPanel.add(new OrderAnswerPanel(this));
        fillFields();
        addDocumentItem.addFocusListener(this);
    }
    /**
     * Initializes the multiple choice view
     * @param nItem the item to default to
     */
    public OrderView(OrderApi nItem) 
    {
        super();
        item = nItem;
        setEditView(true);
        initComponents();
        answerPanel.setLayout(new GridLayout(0, 1));
        answerPanel.add(new OrderAnswerPanel(this));
        fillFields();
        addDocumentItem.setText(kBundle.getString("UPDATE QUESTION"));
        addDocumentItem.addFocusListener(this);
    }

    /**
     * Fills the gui from inItem, sets isEditView to true
     *
     * @param inItem the item to load information from
     */
    @Override
    protected void fillFields(DocumentItemApi inItem)
    {
        OrderApi mQuestion = (OrderApi)inItem;
        questionHeaderPanel.fillFields(mQuestion);
        getAnswerPanel().fillFields(mQuestion); 
        examNavigatorPanel.refreshView(isEditView());
    }

    protected OrderAnswerPanel getAnswerPanel()
    {
        return (OrderAnswerPanel)(answerPanel.getComponent(0));
    }

    /**
     * Returns a Order constructed from the fields in the gui
     * @return Order constructed from the gui fields
     */
    @Override
    protected OrderApi extractItem()
    {
        OrderApi toAdd = Lookup.getDefault().lookup(
                OrderApi.class).newItem();
        toAdd.removeChoices();
        questionHeaderPanel.extractQuestion(toAdd);
        getAnswerPanel().addChoicesToQuestion(toAdd);
        imageChanged = questionHeaderPanel.imageChanged;
        // If is an edit view and the image is unchanged
        if ( isEditView() && !imageChanged )
        {
            toAdd.setShallowImage(item);
        }
        return toAdd;
    }

    /**
     * Stores item appropriately in exam
     */
    public void addItem()
    {
        super.addItem();

        setEditView(false);
        item = Lookup.getDefault().lookup(OrderApi.class).newItem();
        fillFields();

        /*
         * The default text box is filled with html tags so make sure the blank
         * question has these tags so it won't return false when it's checked to
         * see if it has been editted
         */

        addDocumentItem.setText(kBundle.getString("ADD QUESTION"));
    }
    
    /**
     * Return the attached image file being displayed in the view
     * @return the image file being displayed in the view
     */
    @Override
    public File getImageFile()
    {
        return questionHeaderPanel.getStoredImage();
    }

    /**
     * Triggers clicking the bold WYSYWIG button
     */
    @Override
    public void boldAction()
    {
        questionHeaderPanel.boldAction();
    }
    
    /**
     * Triggers clicking the italic WYSYWIG button
     */
    @Override
    public void italicAction()
    {
        questionHeaderPanel.italicAction();
    }
    /**
     * Triggers clicking the underline WYSYWIG button
     */
    @Override
    public void underlineAction()
    {
        questionHeaderPanel.underlineAction();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    //GEN-BEGIN
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        addDocumentItem = new javax.swing.JButton();
        questionHeaderPanel = new qsolutions.view.QuestionHeaderPanel();
        examNavigatorPanel = new ExamNavigatorPanel(this);
        answerPanel = new javax.swing.JPanel();

        org.jdesktop.layout.GroupLayout jFrame1Layout = new org.jdesktop.layout.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 300, Short.MAX_VALUE)
        );

        addDocumentItem.setText(org.openide.util.NbBundle.getMessage(OrderView.class, "OrderView.addDocumentItem.text")); // NOI18N
        addDocumentItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDocumentItemActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout answerPanelLayout = new org.jdesktop.layout.GroupLayout(answerPanel);
        answerPanel.setLayout(answerPanelLayout);
        answerPanelLayout.setHorizontalGroup(
            answerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 0, Short.MAX_VALUE)
        );
        answerPanelLayout.setVerticalGroup(
            answerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 36, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(examNavigatorPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(answerPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(addDocumentItem))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, questionHeaderPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(examNavigatorPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(questionHeaderPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 183, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(answerPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(addDocumentItem, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    //GEN-END
    /**
     * Event handler for addQuestionButton
     *
     * @param evt unused
     */
    private void addDocumentItemActionPerformed( java.awt.event.ActionEvent evt )//GEN-FIRST:event_addDocumentItemActionPerformed
    {//GEN-HEADEREND:event_addDocumentItemActionPerformed
        addItem();
    }//GEN-LAST:event_addDocumentItemActionPerformed

    /**
     * Gets the question header panel
     * @return the question header panel
     */
    protected QuestionHeaderPanel getHeaderPanel()
    {
        return questionHeaderPanel;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDocumentItem;
    private javax.swing.JPanel answerPanel;
    private qsolutions.view.ExamNavigatorPanel examNavigatorPanel;
    private javax.swing.JFrame jFrame1;
    private qsolutions.view.QuestionHeaderPanel questionHeaderPanel;
    // End of variables declaration//GEN-END:variables
}
