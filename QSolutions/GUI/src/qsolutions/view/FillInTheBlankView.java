package qsolutions.view;

import java.io.File;
import org.openide.util.Lookup;
import qsolutions.api.DocumentItemApi;
import qsolutions.api.FillInTheBlankApi;

/** 
 * Panel for adding and editing fill in the blank questions to the exam
 */
public final class FillInTheBlankView extends QuestionView 
{
    /**
     * Creates new form FillInTheBlankView
     */
    public FillInTheBlankView()
    {
        super();
        item = Lookup.getDefault().lookup(FillInTheBlankApi.class).newItem();
        setEditView(false);
        initComponents();
        fillFields();
        addDocumentItem.addFocusListener(this);
        
    }
    
    /**
     * Initalizes the fill in the blank view
     * @param nItem api whos information will be used to fill
     */
    public FillInTheBlankView(FillInTheBlankApi nItem) 
    {
        super();
        item = nItem;
        setEditView(true);
        initComponents();
        fillFields();
        addDocumentItem.setText(kBundle.getString("UPDATE QUESTION"));
        addDocumentItem.addFocusListener(this);
    }
    
    /**
     * Fills the gui from inItem, sets isEditView to true
     * @param inItem the item to load information from
     */
    @Override
    protected void fillFields( DocumentItemApi inItem )
    {
        FillInTheBlankApi lQuestion = ( FillInTheBlankApi ) inItem;
        questionHeaderPanel.fillFields( lQuestion );
        examNavigatorPanel.refreshView(isEditView());
    }
    
    /**
     * Returns a FillInTheBlank constructed from the fields in the gui
     * @return FillInTheBlank constructed from the gui fields
     */
    @Override
    protected FillInTheBlankApi extractItem()
    {
        FillInTheBlankApi toAdd = 
                Lookup.getDefault().lookup(FillInTheBlankApi.class).newItem();
        questionHeaderPanel.extractQuestion( toAdd );
        imageChanged = questionHeaderPanel.imageChanged;
        // If the view is an edit view and the image is unchanged
        if ( isEditView() && !imageChanged )
        {
            toAdd.setShallowImage(item);
        }
        return toAdd;
    }
    
    /**
     * Stores item appropriately in exam
     */
    @Override
    public void addItem()
    {
        super.addItem();
        
        /* The rest of this code clears out the question panel and allows the 
         * user to make a new Long answer question
         */
        setEditView(false);
        item = Lookup.getDefault().lookup(FillInTheBlankApi.class).newItem();
        fillFields();
        
        /* The default text box is filled with html tags so make sure
         * the blank question has these tags so it won't return false
         * when it's checked to see if it has been editted
         */
        addDocumentItem.setText( kBundle.getString("ADD QUESTION") );
    }
    

    /**
     * Returns the image for this question
     * @return the image for the question
     */
    @Override
    public File getImageFile()
    {
        return questionHeaderPanel.getStoredImage();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        addDocumentItem = new javax.swing.JButton();
        questionHeaderPanel = new qsolutions.view.QuestionHeaderPanel();
        examNavigatorPanel = new ExamNavigatorPanel(this);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("qsolutions/view/Bundle"); // NOI18N
        jLabel2.setText(bundle.getString("<HTML>INSTRUCTIONS: PUT WORDS YOU WANT HIDDEN INSIDE BRACKETS [ ]. YOU CAN NEGATE THE BRACKETS USING A FORWARD SLASH BEFORE THE BRACKET. EG. /[]")); // NOI18N

        addDocumentItem.setText(bundle.getString("ADD QUESTION")); // NOI18N
        addDocumentItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDocumentItemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(questionHeaderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(examNavigatorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(addDocumentItem)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(examNavigatorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(questionHeaderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addDocumentItem))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Event handler for the addQuestionButton
     * @param evt unused
     */
    private void addDocumentItemActionPerformed( java.awt.event.ActionEvent evt )//GEN-FIRST:event_addDocumentItemActionPerformed
    {//GEN-HEADEREND:event_addDocumentItemActionPerformed
        addItem();
    }//GEN-LAST:event_addDocumentItemActionPerformed

    /**
     * Triggers clicking the bold WYSYWIG button
     */
    @Override
    public void boldAction()
    {
        questionHeaderPanel.boldAction();
    }
    
    /**
     * Triggers clicking the italic WYSYWIG button
     */
    @Override
    public void italicAction()
    {
        questionHeaderPanel.italicAction();
    }
    /**
     * Triggers clicking the underline WYSYWIG button
     */
    @Override
    public void underlineAction()
    {
        questionHeaderPanel.underlineAction();
    }
    
    /**
     * Gets the question header panel
     * @return the question header panel
     */
    protected QuestionHeaderPanel getHeaderPanel()
    {
        return questionHeaderPanel;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDocumentItem;
    private qsolutions.view.ExamNavigatorPanel examNavigatorPanel;
    private javax.swing.JLabel jLabel2;
    private qsolutions.view.QuestionHeaderPanel questionHeaderPanel;
    // End of variables declaration//GEN-END:variables
}
