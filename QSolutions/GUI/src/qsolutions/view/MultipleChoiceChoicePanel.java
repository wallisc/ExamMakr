package qsolutions.view;

import java.awt.KeyboardFocusManager;
import java.awt.Rectangle;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.text.html.HTMLEditorKit;
import org.openide.util.Lookup;
import qsolutions.api.DriverApi;

/**
 * Creates a new choice panel for multiple choice questions
 */
public class MultipleChoiceChoicePanel extends ChoicePanel 
    implements KeyListener, FocusListener
{
    private MultipleChoiceAnswerPanel parentPanel; 
    private static final int kBufferHeight = 30;
    /**
     * Creates new form MultipleChoiceChoicePanel
     * @param vnf The adjustable panels that allow the user to dynamically 
     * choose how many choices they want
     * @param index the index of the choicepanel
     */
    public MultipleChoiceChoicePanel(VariableNumFieldsPanel vnf, int index)
    {
        super(vnf, index);
        initComponents();
        parentPanel = (MultipleChoiceAnswerPanel)vnf;
        parentPanel.addToRadioGroup(answerRadio);
        answer.setFocusTraversalKeys(
                KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, null);
        answer.setFocusTraversalKeys(
                KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS, null);
        answer.addKeyListener(this);
        answer.setEditorKit(new HTMLEditorKit());
        answer.setTransferHandler(new JTextPaneTransferHandler());
        answer.addFocusListener(this);
    }

    /**
     * Get the text in this choice panel
     * @return Text in the choice panel
     */
    public String getText() 
    {
        String returnString = answer.getText();
        //If the string was never set, return empty string instead of null
        if(returnString == null)
        {
            returnString = "";
        }
        return returnString;
    }

    /**
     * Whether the multiple choice question choice is active
     * @return if the choice is active
     */
    @Override
    public boolean isActive()
    {
        return choiceCheckBox.isSelected();
    }

    /**
     * Whether the multiple choice question is the answer
     * @return if the choice is the answer
     */
    public boolean isAnswer()
    {
        return answerRadio.isSelected();
    }

    /**
     * Sets this choice to be the answer
     */
    public void setAnswer()
    {
        answerRadio.setSelected(true);
    }

    /**
     * Sets the text of this choice
     * @param text Text to be set in the choice
     */
    public void setText(String text)
    {
        answer.setText(text);
    }

    /**
     * Sets the choice to be active or not
     * @param active Whether it's to be active or not
     */
    public void setActive(boolean active)
    {
        choiceCheckBox.setSelected(active);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // GEN-BEGIN
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        answerRadio = new javax.swing.JRadioButton();
        choiceCheckBox = new javax.swing.JCheckBox();
        deleteButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        answer = new javax.swing.JTextPane();

        answerRadio.setText(org.openide.util.NbBundle.getMessage(MultipleChoiceChoicePanel.class, "MultipleChoiceChoicePanel.answerRadio.text")); // NOI18N
        answerRadio.setToolTipText(org.openide.util.NbBundle.getMessage(MultipleChoiceChoicePanel.class, "MultipleChoiceChoicePanel.answerRadio.toolTipText")); // NOI18N
        answerRadio.setFocusable(false);
        answerRadio.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                answerRadioItemStateChanged(evt);
            }
        });

        choiceCheckBox.setSelected(true);
        choiceCheckBox.setText(org.openide.util.NbBundle.getMessage(MultipleChoiceChoicePanel.class, "MultipleChoiceChoicePanel.choiceCheckBox.text")); // NOI18N
        choiceCheckBox.setToolTipText(org.openide.util.NbBundle.getMessage(MultipleChoiceChoicePanel.class, "MultipleChoiceChoicePanel.choiceCheckBox.toolTipText")); // NOI18N
        choiceCheckBox.setFocusable(false);
        choiceCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                choiceCheckBoxItemStateChanged(evt);
            }
        });

        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/delete.png"))); // NOI18N
        deleteButton.setText(org.openide.util.NbBundle.getMessage(MultipleChoiceChoicePanel.class, "MultipleChoiceChoicePanel.deleteButton.text")); // NOI18N
        deleteButton.setToolTipText(org.openide.util.NbBundle.getMessage(MultipleChoiceChoicePanel.class, "MultipleChoiceChoicePanel.deleteButton.toolTipText")); // NOI18N
        deleteButton.setFocusPainted(false);
        deleteButton.setFocusable(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        answer.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                answerFocusGained(evt);
            }
        });
        answer.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                answerKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(answer);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(choiceCheckBox)
                .addGap(16, 16, 16)
                .addComponent(answerRadio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(deleteButton))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(deleteButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(answerRadio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(choiceCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // GEN-END

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteButtonActionPerformed
    {//GEN-HEADEREND:event_deleteButtonActionPerformed
        this.delete();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void answerRadioItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_answerRadioItemStateChanged
    {//GEN-HEADEREND:event_answerRadioItemStateChanged
        // If the radio button is selected, disable the choice check box
        if (answerRadio.isSelected())
        {
            choiceCheckBox.setEnabled(false);
        }
        else
        {
            choiceCheckBox.setEnabled(true);
        }
    }//GEN-LAST:event_answerRadioItemStateChanged

    private void choiceCheckBoxItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_choiceCheckBoxItemStateChanged
    {//GEN-HEADEREND:event_choiceCheckBoxItemStateChanged
        answerRadio.setEnabled(choiceCheckBox.isSelected());
    }//GEN-LAST:event_choiceCheckBoxItemStateChanged

    private void answerFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_answerFocusGained
    {//GEN-HEADEREND:event_answerFocusGained
        answer.selectAll();
    }//GEN-LAST:event_answerFocusGained

    private void answerKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_answerKeyPressed
    {//GEN-HEADEREND:event_answerKeyPressed
        // If the user presses enter, ignore the keypress
        if (evt.getKeyChar()==KeyEvent.VK_ENTER)
        {
            evt.consume();
        }
    }//GEN-LAST:event_answerKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane answer;
    private javax.swing.JRadioButton answerRadio;
    private javax.swing.JCheckBox choiceCheckBox;
    private javax.swing.JButton deleteButton;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    /**
     * Whether the answer is empty
     * @return whether the answer is empty
     */
    @Override
    public boolean isEmpty()
    {
        return Lookup.getDefault().lookup(DriverApi.class)
                .compareExtractedStrings(answer.getText(), "");
    }
    
    /**
     * Unused keyListener method.
     * @param e the keyEvent that we ignore
     */
    public void keyReleased(KeyEvent e)
    {

    }
    
    /**
     * Unused keyListener method.
     * @param e the keyEvent that we ignore
     */
    public void keyTyped(KeyEvent e)
    {
        
    }
    
    /**
     * Determines which button corresponds with a provided hot-key event.
     * @param e the keyEvent generated by the user
     */
    public void keyPressed(KeyEvent e)
    {
        //If control b is pressed, click bold
        if (e.isControlDown() && e.getKeyCode() == KeyEvent.VK_B)
        {
            parentPanel.boldAction();
        }
        //If control i is pressed, click italics
        else if (e.isControlDown()&& e.getKeyCode() == KeyEvent.VK_I)
        {
            parentPanel.italicAction();
        }
        //If control u is pressed, click underline
        else if (e.isControlDown() && e.getKeyCode() == KeyEvent.VK_U)
        {
            parentPanel.underlineAction();
        }
    }
    
    /**
    * Called if some component gained keyboard focus (whether it be from 
    * keyboard tabbing or mouse click)
    * @param ev the event generated from the focus gain, include the component
    * that got focused
    */
    @Override
    public void focusGained(FocusEvent ev)
    {
        Rectangle newFocusBox = ev.getComponent().getBounds();
        newFocusBox.y += kBufferHeight; 
        this.scrollRectToVisible(newFocusBox);
    }
    
   /**
    * Called if some component loses keyboard focus (whether it be from 
    * keyboard tabbing or mouse click off the component)
    * @param ev the event generated from the focus loss, include the component
    * that got focused
    */
    @Override
    public void focusLost(FocusEvent ev)
    {
        
    }
}
