/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package qsolutions.gui;

import java.util.ResourceBundle;
import javax.swing.text.html.HTMLEditorKit;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import qsolutions.view.DocumentItemView;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//qsolutions.gui//DesignView//EN",
autostore = false)
@TopComponent.Description(preferredID = "DesignViewTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "qsolutions.gui.DesignViewTopComponent")
@ActionReference(path = "Menu/MyWindow" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(displayName = "qsolutions.gui.Bundle#DESIGNVIEW",
preferredID = "DesignViewTopComponent")
@Messages({
    "CTL_DesignViewAction=DesignView",
    "CTL_DesignViewTopComponent=Design View",
    "HINT_DesignViewTopComponent=Edit your document items here."
})
public final class DesignViewTopComponent extends TopComponent
{
    private static final String kBundleName = "qsolutions/gui/Bundle";
    private static final ResourceBundle kBundle =
            ResourceBundle.getBundle(kBundleName);

    /**
     * Constructor for the DesignViewTopComponent
     */
    public DesignViewTopComponent()
    {
        initComponents();
        setName(Bundle.CTL_DesignViewTopComponent());
        setDisplayName(kBundle.getString("DESIGN VIEW"));
        setToolTipText(kBundle.getString("DESIGN VIEW TT"));
        Lookup.getDefault().lookup(HTMLEditorKit.class);
    }

    /**
     * Determines if a properties is displayed to the user.
     */
    @Override
    public void componentShowing()
    {
        PropertiesTopComponent ptc = (PropertiesTopComponent) 
                    WindowManager.getDefault().findTopComponent(
                    "PropertiesTopComponent");
        TableViewTopComponent tvtc = (TableViewTopComponent) 
                    WindowManager.getDefault().findTopComponent(
                    "TableViewTopComponent");
        //If the table view is not opened, open it
        if (!tvtc.isOpened())
        {
            tvtc.open();
        }
        tvtc.requestActive();
        ptc.close();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();

        scrollPane.setFocusable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables
    /**
     * Method executed when the component is opened
     */
    @Override
    public void componentOpened() 
    {
        // TODO add custom code on component opening
    }

    /**
     * Method executed when the component is closed
     */
    @Override
    public void componentClosed() 
    {
        // TODO add custom code on component closing
    }
    
    /**
     * Loads a DocumentItemView into the scrollPane
     * @param view the view to be loaded
     */
    public void openDocumentItem(DocumentItemView view)
    {
        scrollPane.setViewportView(view);
    }
    
    /**
     * Returns the DocumentItemView in questionPane
     * @return the DocumentItemView in questionPane
     */
    public DocumentItemView getDocumentItemView()
    {
        return ( DocumentItemView ) scrollPane.getViewport().getView();
    }
    
    /**
     * Returns true is the view has been changed
     * @return true if the view is not null and isDifferent, otherwise false
     */
    protected boolean isDifferent()
    {
        DocumentItemView view = getDocumentItemView();
        return view != null && view.isDifferent();
    }
    
    /**
     * Method to check if the DocumentItem has been altered
     * @return true if the DocumentItem doesn't match the original,
     * otherwise false
     */
    public boolean isChanged()
    {
        boolean panelChanged = true;
        DocumentItemView holder = getDocumentItemView();
        // if holder isn't empty and its gui doesn't match its item prompt save
        if ( holder != null && holder.isDifferent() )
        {
            int confirm = javax.swing.JOptionPane.showConfirmDialog( this,
                         "Would you like to commit question changes?", 
                         "There have been changes made since the last commit.", 
                         javax.swing.JOptionPane.YES_NO_CANCEL_OPTION );
            // if the user confirms, save the edited DocumentItem
            if ( confirm == javax.swing.JOptionPane.YES_OPTION )
            {
                holder.addItem();
            }
            // if the user doesn't commit question changes, the return is false
            if ( confirm == javax.swing.JOptionPane.CANCEL_OPTION )
            {
                panelChanged = false;
            }
            TableViewTopComponent tv = (TableViewTopComponent) 
                    WindowManager.getDefault().findTopComponent(
                    "TableViewTopComponent");
            tv.refreshTable();
        }
        return panelChanged;
    }

    void writeProperties(java.util.Properties p)
    {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p)
    {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
